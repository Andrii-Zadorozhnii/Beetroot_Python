import asyncio
import asyncpg
import hashlib
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest, TelegramAPIError
from aiogram.filters import Command
import logging
from cargo_project.settings import BOT_TOKEN, DRIVERS_GROUP_ID, SALT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TOKEN = BOT_TOKEN
DB_CONFIG = {
    "user": "postgres",
    "password": "postgres",
    "database": "cargo_db",
    "host": "localhost"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑")],
        [KeyboardButton(text="üëÄ –ú–æ–∏ –≥—Ä—É–∑—ã")]
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
confirm_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ"), KeyboardButton(text="üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"), KeyboardButton(text="üè¢ –ö–æ–º–ø–∞–Ω–∏—è")],
        [KeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω"), KeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∞")],
        [KeyboardButton(text="üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)


def format_cargo_data(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return (
        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['origin']}\n"
        f"üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {data['destination']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {data['payment']} USD\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['description']}\n"
        f"üîë –ù–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {data['shipment_id']}"
    )


def hash_data(data: str) -> str:
    return hashlib.sha256((data + SALT).encode()).hexdigest()


def generate_unique_id(data: dict) -> str:
    raw_data = f"{data['name']}{data['origin']}{data['destination']}{data['company']}{data['phone']}{data['payment']}"
    return hash_data(raw_data)[:10]


async def get_cargo_by_id(shipment_id: str, user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –ø–æ ID"""
    try:
        conn = await asyncpg.connect(**DB_CONFIG)
        cargo = await conn.fetchrow(
            "SELECT * FROM cargo_cargo WHERE shipment_id = $1 AND user_id = $2",
            shipment_id, hash_data(str(user_id)))
        await conn.close()

        if not cargo:
            logger.warning(f"–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: shipment_id={shipment_id}")
            raise ValueError("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")

        return dict(cargo)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–∞: {e}")
        raise


async def get_user_cargos(user_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = None
    try:
        conn = await asyncpg.connect(**DB_CONFIG)
        query = "SELECT * FROM cargo_cargo WHERE user_id = $1"
        cargos = await conn.fetch(query, hash_data(str(user_id)))
        return [dict(cargo) for cargo in cargos]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        return []
    finally:
        if conn:
            await conn.close()


async def save_to_db(user_id: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –≤ –ë–î"""
    conn = await asyncpg.connect(**DB_CONFIG)
    data = user_data[user_id]["data"]

    try:
        await conn.execute(
            """
            INSERT INTO cargo_cargo 
            (shipment_id, name, origin, destination, company, 
             phone, payment, description, user_id)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
            """,
            data["shipment_id"], data["name"], data["origin"],
            data["destination"], data["company"], data["phone"],
            data["payment"], data["description"],
            hash_data(str(user_id)))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º
        driver_message = (
            f"üöõ –ù–æ–≤—ã–π –≥—Ä—É–∑ –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n"
            f"üì¶ –ì—Ä—É–∑: {data['name']}\n"
            f"üìç –ú–∞—Ä—à—Ä—É—Ç: {data['origin']} ‚Üí {data['destination']}\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
            f"üí∞ –û–ø–ª–∞—Ç–∞: {data['payment']} USD\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['phone']}\n"
            f"üìù –î–µ—Ç–∞–ª–∏: {data['description']}\n"
            f"üîë –ù–æ–º–µ—Ä: {data['shipment_id']}"
        )

        builder = InlineKeyboardBuilder()
        if data['phone'].startswith('@'):
            builder.button(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å", url=f"https://t.me/{data['phone'][1:]}")
        else:
            clean_phone = re.sub(r'[^\d]', '', data['phone'])
            builder.button(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"https://t.me/share/phone?phone={clean_phone}")

        try:
            await bot.send_message(
                chat_id=DRIVERS_GROUP_ID,
                text=driver_message,
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        raise
    finally:
        await conn.close()


async def delete_cargo_from_db(shipment_id: str, user_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ –ë–î"""
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î
        result = await conn.execute(
            "DELETE FROM cargo_cargo WHERE shipment_id = $1 AND user_id = $2",
            shipment_id, hash_data(str(user_id)))

        if result == "DELETE 0":
            raise ValueError("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
        try:
            chat = await bot.get_chat(DRIVERS_GROUP_ID)
            async for message in bot.get_chat_history(chat.id, limit=100):
                if message.text and f"üîë {shipment_id}" in message.text:
                    try:
                        await bot.delete_message(chat.id, message.message_id)
                        break
                    except Exception:
                        continue
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        raise
    finally:
        await conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)


@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑")
async def add_cargo(message: Message):
    user_data[message.chat.id] = {"state": "adding", "data": {}}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞:")


@dp.message(lambda message: message.text == "üëÄ –ú–æ–∏ –≥—Ä—É–∑—ã")
async def show_cargos(message: Message):
    user_id = message.chat.id
    cargos = await get_user_cargos(user_id)

    if not cargos:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤.")
        return

    await message.answer("üì¶ –í–∞—à–∏ –≥—Ä—É–∑—ã:")

    for cargo in cargos:
        msg = (
            f"üî∏ –ù–æ–º–µ—Ä: {cargo['shipment_id']}\n"
            f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {cargo['name']}\n"
            f"üöö –ú–∞—Ä—à—Ä—É—Ç: {cargo['origin']} ‚Üí {cargo['destination']}\n"
            f"üíµ –û–ø–ª–∞—Ç–∞: {cargo['payment']} USD"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{cargo['shipment_id']}")
        builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{cargo['shipment_id']}")

        await message.answer(msg, reply_markup=builder.as_markup())


@dp.callback_query(lambda c: c.data.startswith('delete_'))
async def delete_cargo(callback: CallbackQuery):
    shipment_id = callback.data.replace('delete_', '')
    try:
        await delete_cargo_from_db(shipment_id, callback.from_user.id)
        await callback.answer("–ì—Ä—É–∑ —É–¥–∞–ª–µ–Ω", show_alert=True)
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


@dp.callback_query(lambda c: c.data.startswith('edit_'))
async def edit_cargo(callback: CallbackQuery):
    shipment_id = callback.data.replace('edit_', '')
    user_id = callback.from_user.id

    try:
        cargo = await get_cargo_by_id(shipment_id, user_id)
        user_data[user_id] = {
            "state": "editing",
            "data": cargo,
            "shipment_id": shipment_id
        }
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=edit_menu
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(lambda message: message.text in ["üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ", "üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
                                             "üè¢ –ö–æ–º–ø–∞–Ω–∏—è", "üìû –¢–µ–ª–µ—Ñ–æ–Ω", "üí∞ –û–ø–ª–∞—Ç–∞", "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
async def edit_field(message: Message):
    user_id = message.chat.id
    if user_id not in user_data or user_data[user_id]["state"] != "editing":
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=main_menu)
        return

    field_map = {
        "üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ": "name",
        "üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "origin",
        "üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "destination",
        "üè¢ –ö–æ–º–ø–∞–Ω–∏—è": "company",
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω": "phone",
        "üí∞ –û–ø–ª–∞—Ç–∞": "payment",
        "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "description"
    }

    field = field_map[message.text]
    user_data[user_id]["edit_field"] = field
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {message.text}:", reply_markup=types.ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
@dp.message()
async def handle_input(message: Message):
    user_id = message.chat.id
    text = message.text

    if user_id not in user_data:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=main_menu)
        return

    if user_data[user_id]["state"] == "adding":
        await handle_add_cargo(message)
    elif user_data[user_id]["state"] == "editing" and "edit_field" in user_data[user_id]:
        await handle_edit_field(message)


async def handle_add_cargo(message: Message):
    user_id = message.chat.id
    text = message.text
    data = user_data[user_id]["data"]

    if "name" not in data:
        if 2 <= len(text) <= 100:
            data["name"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        else:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤")
    elif "origin" not in data:
        data["origin"] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    elif "destination" not in data:
        data["destination"] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    elif "company" not in data:
        if 2 <= len(text) <= 100:
            data["company"] = text
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üì± –í–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")],
                    [KeyboardButton(text="üì≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram")]
                ],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∫–æ–Ω—Ç–∞–∫—Ç–∞:", reply_markup=keyboard)
        else:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤")
    elif "phone" not in data:
        if message.text == "üì≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram":
            if message.from_user.username:
                data["phone"] = f"@{message.from_user.username}"
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (USD):", reply_markup=types.ReplyKeyboardRemove())
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç username. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")
        elif re.match(r"^\+?[1-9]\d{1,14}$", text):
            data["phone"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (USD):", reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")
    elif "payment" not in data:
        try:
            amount = float(text)
            if amount > 0:
                data["payment"] = amount
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
            else:
                await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    elif "description" not in data:
        if len(text) <= 500:
            data["description"] = text
            data["shipment_id"] = generate_unique_id(data)
            try:
                await save_to_db(user_id)
                await message.answer(
                    f"‚úÖ –ì—Ä—É–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n{format_cargo_data(data)}",
                    reply_markup=main_menu
                )
                del user_data[user_id]
            except Exception:
                await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=main_menu)
        else:
            await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å 500 —Å–∏–º–≤)")


async def handle_edit_field(message: Message):
    user_id = message.chat.id
    text = message.text
    field = user_data[user_id]["edit_field"]
    shipment_id = user_data[user_id]["shipment_id"]

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    valid = True
    if field == "name" and not (2 <= len(text) <= 100):
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤")
        valid = False
    elif field == "company" and not (2 <= len(text) <= 100):
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤")
        valid = False
    elif field == "phone" and not re.match(r"^\+?[1-9]\d{1,14}$", text) and not text.startswith("@"):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username")
        valid = False
    elif field == "payment":
        try:
            amount = float(text)
            if amount <= 0:
                await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
                valid = False
            else:
                text = amount
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            valid = False
    elif field == "description" and len(text) > 500:
        await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å 500 —Å–∏–º–≤)")
        valid = False

    if not valid:
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    conn = None
    try:
        conn = await asyncpg.connect(**DB_CONFIG)
        await conn.execute(
            f"UPDATE cargo_cargo SET {field} = $1 WHERE shipment_id = $2 AND user_id = $3",
            text, shipment_id, hash_data(str(user_id)))

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data
        user_data[user_id]["data"][field] = text

        await message.answer(
            f"‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n{format_cargo_data(user_data[user_id]['data'])}",
            reply_markup=main_menu
        )
        del user_data[user_id]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", reply_markup=main_menu)
    finally:
        if conn:
            await conn.close()


async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())