# Вот 10 задач на тренировку по наследованию в Python, начиная с простых и переходя к более сложным:
#
# 1. Базовое наследование
#
# Создайте класс Animal с методом sound(), который выводит “Животное издает звук”.
# Создайте два класса-наследника: Dog и Cat, которые переопределяют метод sound(), чтобы выводить “Собака лает” и “Кошка мяукает”.
# Создайте экземпляры всех трех классов и вызовите метод sound().
#
# 2. Вызов метода родителя
#
# Создайте класс Person с методом introduce(), который выводит “Я человек”.
# Создайте класс Student, наследующий Person, который дополняет introduce(), добавляя “Я студент”. Используйте super() для вызова метода родителя.
#
# 3. Конструктор с параметрами
#
# Создайте класс Vehicle с атрибутами make (марка) и model (модель).
# Добавьте метод info(), который выводит эту информацию. Создайте класс Car, который добавляет атрибут seats (количество мест).
# Реализуйте метод info(), чтобы он выводил информацию и о количестве мест.
#
# 4. Множественное наследование
#
# Создайте классы Flyer (с методом fly(), выводящим “Летаю”) и Swimmer (с методом swim(), выводящим “Плаваю”).
# Создайте класс Duck, наследующий оба класса, и проверьте работу методов.
#
# 5. Переопределение методов
#
# Создайте класс Shape с методом area(), который возвращает 0.
# Создайте два класса-наследника: Rectangle и Circle.
# Для каждого класса переопределите метод area(), чтобы он считал площадь прямоугольника и круга соответственно.
#
# 6. Абстрактный класс
#
# Используйте модуль abc для создания абстрактного класса Animal с абстрактным методом move().
# Реализуйте классы Fish и Bird, которые наследуют Animal и реализуют метод move() для описания плавания и полета.
#
# 7. Закрытые атрибуты
#
# Создайте класс BankAccount с закрытым атрибутом __balance (начальное значение — 1000).
# Реализуйте методы для пополнения (deposit) и снятия (withdraw) денег, а также метод для получения текущего баланса (get_balance).
# Проверьте доступность закрытого атрибута извне.
#
# 8. Цепочка вызовов методов
#
# Создайте класс Employee с методом work(), выводящим “Работаю”.
# Создайте класс Manager, который дополняет work() сообщением “Руководитель проверяет работу”.
# Используйте super() для вызова метода work() базового класса в классе Manager.
#
# 9. Список экземпляров наследников
#
# Создайте класс Shape с атрибутом name.
# Реализуйте дочерние классы Triangle, Square и Circle, каждый из которых задает уникальное значение атрибута name.
# Создайте список экземпляров этих классов и выведите их имена с помощью цикла.
#
# 10. Игра с героями
#
# Создайте базовый класс Hero с методами attack() и defend().
# Реализуйте классы-наследники Warrior и Mage, каждый из которых имеет свою реализацию методов.
# Создайте несколько героев и смоделируйте бой между ними, вызывая методы attack() и defend().
