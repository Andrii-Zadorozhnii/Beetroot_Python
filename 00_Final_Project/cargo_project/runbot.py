import asyncio
import asyncpg
import hashlib
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command

# üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7671224104:AAGO1E0ssPTXjko_Ji7n3w0l3S8B52EeWzQ"

DB_CONFIG = {
    "user": "postgres",
    "password": "postgres",
    "database": "cargo_db",
    "host": "localhost"
}

bot = Bot(token=TOKEN)
dp = Dispatcher()

user_data = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
def run_bot():
    print("Bot is running")

def generate_unique_id(data: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    raw_data = f"{data['name']}{data['origin']}{data['destination']}{data['company']}{data['phone']}{data['payment']}"
    return hashlib.sha256(raw_data.encode()).hexdigest()[:10]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ —Ö—ç—à–∞

@dp.message(Command("start"))
async def start(message: Message):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    user_data[message.chat.id] = {}  # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞:")

@dp.message()
async def collect_data(message: Message):
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–≤–æ–∑–∫–µ –ø–æ —à–∞–≥–∞–º"""
    user_id = message.chat.id
    user_input = message.text

    if "name" not in user_data[user_id]:
        user_data[user_id]["name"] = user_input
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    elif "origin" not in user_data[user_id]:
        user_data[user_id]["origin"] = user_input
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    elif "destination" not in user_data[user_id]:
        user_data[user_id]["destination"] = user_input
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    elif "company" not in user_data[user_id]:
        user_data[user_id]["company"] = user_input
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    elif "phone" not in user_data[user_id]:
        user_data[user_id]["phone"] = user_input
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–≤ USD):")
    elif "payment" not in user_data[user_id]:
        try:
            user_data[user_id]["payment"] = float(user_input)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (—á–∏—Å–ª–æ).")
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–∑–∞:")
    elif "image" not in user_data[user_id]:
        user_data[user_id]["image"] = user_input
        user_data[user_id]["shipment_id"] = generate_unique_id(user_data[user_id])  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏

        await save_to_db(user_id)
        await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ!\nüì¶ –ù–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {user_data[user_id]['shipment_id']}")
        del user_data[user_id]  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

async def save_to_db(user_id: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–≤–æ–∑–∫–µ –≤ PostgreSQL (—Ç–∞–±–ª–∏—Ü–∞ cargo_cargo)"""
    conn = await asyncpg.connect(**DB_CONFIG)
    data = user_data[user_id]
    await conn.execute(
        """
        INSERT INTO cargo_cargo (shipment_id, name, origin, destination, company, phone, payment, image) 
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        """,
        data["shipment_id"], data["name"], data["origin"], data["destination"],
        data["company"], data["phone"], data["payment"], data["image"]
    )
    await conn.close()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

asyncio.run(main())