import asyncio
import asyncpg
import hashlib
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import logging

from cargo_project.settings import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TOKEN = BOT_TOKEN  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
DB_CONFIG = {  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    "user": "postgres",
    "password": "postgres",
    "database": "cargo_db",
    "host": "localhost"
}

# –°–æ–ª—å –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ)
SALT = "your_unique_salt_value"

# üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π
user_data = {}

# üîÑ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—è–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
FIELD_MAPPING = {
    "üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ": "name",
    "üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "origin",
    "üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "destination",
    "üè¢ –ö–æ–º–ø–∞–Ω–∏—è": "company",
    "üìû –¢–µ–ª–µ—Ñ–æ–Ω": "phone",
    "üí∞ –û–ø–ª–∞—Ç–∞": "payment",
    "üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": "image",
    "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "description"
}

# üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑"), KeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–∑")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–∑"), KeyboardButton(text="üëÄ –ú–æ–∏ –≥—Ä—É–∑—ã")]
    ],
    resize_keyboard=True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
)

# üñçÔ∏è –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ"), KeyboardButton(text="üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"), KeyboardButton(text="üè¢ –ö–æ–º–ø–∞–Ω–∏—è")],
        [KeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω"), KeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∞")],
        [KeyboardButton(text="üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"), KeyboardButton(text="üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]  # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    ],
    resize_keyboard=True
)

# ‚úÖ‚ùå –ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
confirm_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
    ],
    resize_keyboard=True
)


def hash_data(data: str) -> str:
    """
    –•–µ—à–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SHA-256 –∏ —Å–æ–ª–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ 64 —Å–∏–º–≤–æ–ª–æ–≤ (—Ö–µ—à).
    """
    return hashlib.sha256((data + SALT).encode()).hexdigest()


def generate_unique_id(data: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SHA-256 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 10-—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞.
    """
    raw_data = f"{data['name']}{data['origin']}{data['destination']}{data['company']}{data['phone']}{data['payment']}"
    return hash_data(raw_data)[:10]


async def get_cargo_by_id(shipment_id: str, user_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    """
    try:
        conn = await asyncpg.connect(**DB_CONFIG)
        cargo = await conn.fetchrow(
            """
            SELECT * FROM cargo_cargo 
            WHERE shipment_id = $1 AND user_id = $2
            """,
            shipment_id, hash_data(str(user_id))  # –•–µ—à–∏—Ä—É–µ–º user_id
        )
        await conn.close()

        if not cargo:
            logger.warning(f"–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: shipment_id={shipment_id}, user_id={hash_data(str(user_id))}")
            raise ValueError("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")

        return dict(cargo)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–∞: {e}")
        raise


async def validate_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_pattern = re.compile(r"^\+?[1-9]\d{1,14}$")
    return bool(phone_pattern.match(phone))


async def validate_payment(payment: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã"""
    try:
        amount = float(payment)
        return amount > 0
    except ValueError:
        return False


async def validate_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞"""
    return 2 <= len(name) <= 100


async def validate_company(company: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    return 2 <= len(company) <= 100


async def validate_description(description: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    return len(description) <= 500


@dp.message(Command("start"))
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º"""
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)


@dp.message(lambda message: message.text == "üëÄ –ú–æ–∏ –≥—Ä—É–∑—ã")
async def show_all_cargos(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ"""
    user_id = message.chat.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤.")

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cargos = await get_user_cargos(user_id)

    if not cargos:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "üì¶ –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–∑–æ–≤:\n\n"
    for cargo in cargos:
        response += f"üî∏ –ù–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {cargo['shipment_id']}\n"
        response += f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {cargo['name']}\n"
        response += f"üöö –ú–∞—Ä—à—Ä—É—Ç: {cargo['origin']} ‚Üí {cargo['destination']}\n"
        response += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {cargo['company']}\n"
        response += f"üíµ –û–ø–ª–∞—Ç–∞: {cargo['payment']}\n\n"
        response += "‚îÅ" * 20 + "\n\n"

    await message.answer(response, reply_markup=main_menu)


async def get_user_cargos(user_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = await asyncpg.connect(**DB_CONFIG)
    cargos = await conn.fetch(
        "SELECT * FROM cargo_cargo WHERE user_id = $1",
        hash_data(str(user_id))  # –•–µ—à–∏—Ä—É–µ–º user_id –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    )
    await conn.close()
    return [dict(cargo) for cargo in cargos]


@dp.message()
async def handle_user_input(message: Message):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –¥–µ–π—Å—Ç–≤–∏—è"""
    user_id = message.chat.id
    text = message.text

    # üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑":
        user_data[user_id] = {"state": "adding", "data": {}}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞:")
    elif text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–∑":
        user_data[user_id] = {"state": "editing", "data": {}}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    elif text == "üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–∑":
        user_data[user_id] = {"state": "deleting", "data": {}}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    # üõ†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif user_id in user_data:
        if user_data[user_id]["state"] == "adding":
            await process_cargo_data(message)
        elif user_data[user_id]["state"] == "editing":
            await process_edit_cargo(message)
        elif user_data[user_id]["state"] == "deleting":
            await process_delete_cargo(message)
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")


async def process_cargo_data(message: Message):
    """–ü–æ—à–∞–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞"""
    user_id = message.chat.id
    text = message.text
    current_data = user_data[user_id]["data"]

    if "name" not in current_data:
        if await validate_name(text):
            current_data["name"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≥–æ—Ä–æ–¥):")
        else:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    elif "origin" not in current_data:
        current_data["origin"] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≥–æ—Ä–æ–¥):")
    elif "destination" not in current_data:
        current_data["destination"] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    elif "company" not in current_data:
        if await validate_company(text):
            current_data["company"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
        else:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    elif "phone" not in current_data:
        if await validate_phone(text):
            current_data["phone"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–≤ USD):")
        else:
            await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    elif "payment" not in current_data:
        if await validate_payment(text):
            current_data["payment"] = float(text)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–∑–∞:")
        else:
            await message.answer("–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    elif "image" not in current_data:
        if text.startswith("http"):
            current_data["image"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≥—Ä—É–∑—É:")
        else:
            await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'http'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    elif "description" not in current_data:
        if await validate_description(text):
            current_data["description"] = text
            current_data["shipment_id"] = generate_unique_id(current_data)
            await save_to_db(user_id)
            await message.answer(f"‚úÖ –ì—Ä—É–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n{format_cargo_data(current_data)}", reply_markup=main_menu)
            del user_data[user_id]  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        else:
            await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def save_to_db(user_id: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = await asyncpg.connect(**DB_CONFIG)
    data = user_data[user_id]["data"]
    await conn.execute(
        """
        INSERT INTO cargo_cargo 
        (shipment_id, name, origin, destination, company, 
         phone, payment, image, description, user_id)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
        """,
        data["shipment_id"], data["name"], data["origin"],
        data["destination"], data["company"], data["phone"],
        data["payment"], data["image"], data["description"],
        hash_data(str(user_id))  # –•–µ—à–∏—Ä—É–µ–º user_id –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    )
    await conn.close()


async def process_edit_cargo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞"""
    user_id = message.chat.id
    text = message.text
    current_data = user_data[user_id]["data"]

    # üîÑ –õ–æ–≥–∏–∫–∞ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if "shipment_id" not in current_data:
        try:
            cargo = await get_cargo_by_id(text, user_id)
            current_data["shipment_id"] = text
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=edit_menu)
        except ValueError as e:
            await message.answer(str(e))
            del user_data[user_id]
    elif "field" not in current_data:
        if text == "üîô –ù–∞–∑–∞–¥":
            del user_data[user_id]
            await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
        elif text in FIELD_MAPPING:
            current_data["field"] = FIELD_MAPPING[text]
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {text}:")
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
    elif "new_value" not in current_data:
        current_data["new_value"] = text
        await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å {text}?",
                             reply_markup=confirm_menu)
    else:
        if text == "‚úÖ –î–∞":
            await update_cargo_in_db(
                current_data["shipment_id"],
                current_data["field"],
                current_data["new_value"],
                user_id
            )
            await message.answer(f"‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu)
        else:
            await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        del user_data[user_id]


async def update_cargo_in_db(shipment_id: str, field: str, value: str, user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è –≥—Ä—É–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    allowed_fields = set(FIELD_MAPPING.values())
    if field not in allowed_fields:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –ø–æ–ª—è")

    conn = await asyncpg.connect(**DB_CONFIG)
    result = await conn.execute(
        f"""
        UPDATE cargo_cargo 
        SET {field} = $1 
        WHERE shipment_id = $2 AND user_id = $3
        """,
        value, shipment_id, hash_data(str(user_id))  # –•–µ—à–∏—Ä—É–µ–º user_id
    )
    await conn.close()

    if result == "UPDATE 0":
        raise ValueError("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")


async def process_delete_cargo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞"""
    user_id = message.chat.id
    text = message.text
    current_data = user_data[user_id]["data"]

    if "shipment_id" not in current_data:
        try:
            cargo = await get_cargo_by_id(text, user_id)
            current_data["shipment_id"] = text
            await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–∑ —Å –Ω–æ–º–µ—Ä–æ–º {text}?", reply_markup=confirm_menu)
        except ValueError as e:
            await message.answer(str(e))
            del user_data[user_id]
    elif "confirmation" not in current_data:
        if text == "‚úÖ –î–∞":
            await delete_cargo_from_db(current_data["shipment_id"], user_id)
            await message.answer(f"‚úÖ –ì—Ä—É–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=main_menu)
        else:
            await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        del user_data[user_id]


async def delete_cargo_from_db(shipment_id: str, user_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    conn = await asyncpg.connect(**DB_CONFIG)
    result = await conn.execute(
        """
        DELETE FROM cargo_cargo 
        WHERE shipment_id = $1 AND user_id = $2
        """,
        shipment_id, hash_data(str(user_id))  # –•–µ—à–∏—Ä—É–µ–º user_id
    )
    await conn.close()

    if result == "DELETE 0":
        raise ValueError("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")


def format_cargo_data(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return (
        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['origin']}\n"
        f"üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {data['destination']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {data['payment']} USD\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['description']}\n"
        f"üîë –ù–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {data['shipment_id']}"
    )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())