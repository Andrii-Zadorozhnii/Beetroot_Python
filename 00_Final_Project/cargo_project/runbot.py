import asyncio
import asyncpg
import hashlib
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

# üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7671224104:AAGO1E0ssPTXjko_Ji7n3w0l3S8B52EeWzQ"

DB_CONFIG = {
    "user": "postgres",
    "password": "postgres",
    "database": "cargo_db",
    "host": "localhost"
}

bot = Bot(token=TOKEN)
dp = Dispatcher()
user_data = {}


FIELD_MAPPING = {
    "üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ": "name",
    "üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "origin",
    "üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "destination",
    "üè¢ –ö–æ–º–ø–∞–Ω–∏—è": "company",
    "üìû –¢–µ–ª–µ—Ñ–æ–Ω": "phone",
    "üí∞ –û–ø–ª–∞—Ç–∞": "payment",
    "üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": "image",
    "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "description"
}
# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑"), KeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–∑")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–∑"), KeyboardButton(text="üëÄ –ú–æ–∏ –≥—Ä—É–∑—ã")]
    ],
    resize_keyboard=True
)


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –≥—Ä—É–∑—ã"
@dp.message(lambda message: message.text == "üëÄ –ú–æ–∏ –≥—Ä—É–∑—ã")
async def show_all_cargos(message: Message):
    user_id = message.chat.id
    cargos = await get_user_cargos(user_id)

    if not cargos:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤.")
        return

    response = "üì¶ –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–∑–æ–≤:\n\n"
    for cargo in cargos:
        response += f"üî∏ –ù–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {cargo['shipment_id']}\n"
        response += f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {cargo['name']}\n"
        response += f"üöö –ú–∞—Ä—à—Ä—É—Ç: {cargo['origin']} ‚Üí {cargo['destination']}\n"
        response += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {cargo['company']}\n"
        response += f"üíµ –û–ø–ª–∞—Ç–∞: {cargo['payment']}\n\n"
        response += "‚îÅ" * 20 + "\n\n"

    await message.answer(response, reply_markup=main_menu)

# üîπ –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
async def get_user_cargos(user_id: int) -> list:
    conn = await asyncpg.connect(**DB_CONFIG)
    cargos = await conn.fetch(
        "SELECT * FROM cargo_cargo WHERE user_id = $1",
        user_id
    )
    await conn.close()
    return [dict(cargo) for cargo in cargos]

# üîπ –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ"), KeyboardButton(text="üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"), KeyboardButton(text="üè¢ –ö–æ–º–ø–∞–Ω–∏—è")],
        [KeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω"), KeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∞")],
        [KeyboardButton(text="üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"), KeyboardButton(text="üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# üîπ –ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
    ],
    resize_keyboard=True
)


def generate_unique_id(data: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏."""
    raw_data = f"{data['name']}{data['origin']}{data['destination']}{data['company']}{data['phone']}{data['payment']}"
    return hashlib.sha256(raw_data.encode()).hexdigest()[:10]


@dp.message(Command("start"))
async def start(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è."""
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)


@dp.message()
async def handle_user_input(message: Message):
    user_id = message.chat.id
    text = message.text

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑":
        user_data[user_id] = {"state": "adding", "data": {}}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞:")
    elif text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–∑":
        user_data[user_id] = {"state": "editing", "data": {}}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    elif text == "üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–∑":
        user_data[user_id] = {"state": "deleting", "data": {}}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    elif user_id in user_data:
        if user_data[user_id]["state"] == "adding":
            await process_cargo_data(message)
        elif user_data[user_id]["state"] == "editing":
            await process_edit_cargo(message)
        elif user_data[user_id]["state"] == "deleting":
            await process_delete_cargo(message)
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")


async def process_cargo_data(message: Message):
    user_id = message.chat.id
    text = message.text

    if "name" not in user_data[user_id]["data"]:
        user_data[user_id]["data"]["name"] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    elif "origin" not in user_data[user_id]["data"]:
        user_data[user_id]["data"]["origin"] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    elif "destination" not in user_data[user_id]["data"]:
        user_data[user_id]["data"]["destination"] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    elif "company" not in user_data[user_id]["data"]:
        user_data[user_id]["data"]["company"] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    elif "phone" not in user_data[user_id]["data"]:
        user_data[user_id]["data"]["phone"] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–≤ USD):")
    elif "payment" not in user_data[user_id]["data"]:
        try:
            user_data[user_id]["data"]["payment"] = float(text)
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã.")
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–∑–∞:")
    elif "image" not in user_data[user_id]["data"]:
        user_data[user_id]["data"]["image"] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≥—Ä—É–∑—É:")
    elif "description" not in user_data[user_id]["data"]:
        user_data[user_id]["data"]["description"] = text
        user_data[user_id]["data"]["shipment_id"] = generate_unique_id(user_data[user_id]["data"])
        await save_to_db(user_id)
        await message.answer(f"‚úÖ –ì—Ä—É–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n{format_cargo_data(user_data[user_id]['data'])}", reply_markup=main_menu)
        del user_data[user_id]


async def process_edit_cargo(message: Message):

    user_id = message.chat.id
    text = message.text

    if "shipment_id" not in user_data[user_id]["data"]:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cargo = await get_cargo_by_id(text, user_id)
            user_data[user_id]["data"]["shipment_id"] = text
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=edit_menu)
        except ValueError as e:
            await message.answer(str(e))
            del user_data[user_id]
    elif "field" not in user_data[user_id]["data"]:
        if text == "üîô –ù–∞–∑–∞–¥":
            del user_data[user_id]
            await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
        elif text in FIELD_MAPPING:
            user_data[user_id]["data"]["field"] = FIELD_MAPPING[text]
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {text}:")
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
    elif "new_value" not in user_data[user_id]["data"]:
        user_data[user_id]["data"]["new_value"] = text
        await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å {text}?",
                           reply_markup=confirm_menu)
    else:
        if text == "‚úÖ –î–∞":
            shipment_id = user_data[user_id]["data"]["shipment_id"]
            field = user_data[user_id]["data"]["field"]
            value = user_data[user_id]["data"]["new_value"]
            await update_cargo_in_db(shipment_id, field, value)
            await message.answer(f"‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu)
        else:
            await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        del user_data[user_id]

async def process_delete_cargo(message: Message):
    user_id = message.chat.id
    text = message.text

    if "shipment_id" not in user_data[user_id]["data"]:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cargo = await get_cargo_by_id(text, user_id)
            user_data[user_id]["data"]["shipment_id"] = text
            await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–∑ —Å –Ω–æ–º–µ—Ä–æ–º {text}?", reply_markup=confirm_menu)
        except ValueError as e:
            await message.answer(str(e))
            del user_data[user_id]
    elif "confirmation" not in user_data[user_id]["data"]:
        if text == "‚úÖ –î–∞":
            shipment_id = user_data[user_id]["data"]["shipment_id"]
            await delete_cargo_from_db(shipment_id)
            await message.answer(f"‚úÖ –ì—Ä—É–∑ —Å –Ω–æ–º–µ—Ä–æ–º {shipment_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=main_menu)
        else:
            await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        del user_data[user_id]


async def save_to_db(user_id: int):
    conn = await asyncpg.connect(**DB_CONFIG)
    data = user_data[user_id]["data"]
    await conn.execute(
        """
        INSERT INTO cargo_cargo 
        (shipment_id, name, origin, destination, company, 
         phone, payment, image, description, user_id)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
        """,
        data["shipment_id"], data["name"], data["origin"],
        data["destination"], data["company"], data["phone"],
        data["payment"], data["image"], data["description"],
        user_id  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )
    await conn.close()


async def update_cargo_in_db(shipment_id: str, field: str, value: str, user_id: int):
    allowed_fields = set(FIELD_MAPPING.values())
    if field not in allowed_fields:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –ø–æ–ª—è")

    conn = await asyncpg.connect(**DB_CONFIG)
    result = await conn.execute(
        f"""
        UPDATE cargo_cargo 
        SET {field} = $1 
        WHERE shipment_id = $2 AND user_id = $3
        """,
        value, shipment_id, user_id
    )
    await conn.close()

    if result == "UPDATE 0":
        raise ValueError("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")


async def delete_cargo_from_db(shipment_id: str, user_id: int):
    conn = await asyncpg.connect(**DB_CONFIG)
    result = await conn.execute(
        """
        DELETE FROM cargo_cargo 
        WHERE shipment_id = $1 AND user_id = $2
        """,
        shipment_id, user_id
    )
    await conn.close()

    if result == "DELETE 0":
        raise ValueError("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")


def format_cargo_data(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    return (f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\nüöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['origin']}\n"
            f"üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {data['destination']}\nüè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\nüí∞ –û–ø–ª–∞—Ç–∞: {data['payment']} USD\n"
            f"üñº üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['description']}\n"
            f"üì¶ –ù–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {data['shipment_id']}")


async def get_cargo_by_id(shipment_id: str, user_id: int) -> dict:
    conn = await asyncpg.connect(**DB_CONFIG)
    cargo = await conn.fetchrow(
        "SELECT * FROM cargo_cargo WHERE shipment_id = $1 AND user_id = $2",
        shipment_id, user_id
    )
    await conn.close()

    if not cargo:
        raise ValueError("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    return dict(cargo)



async def main():
    await dp.start_polling(bot)


asyncio.run(main())