# Задание 1: Простой декоратор
#
# Напиши декоратор, который будет выводить сообщение “Функция была вызвана!” перед каждым вызовом функции.
#
# Пример:


def my_decorator(func):
    def wrapper():
        print(
            'Функция была вызвана!'
        )
        func()

    return wrapper


@my_decorator
def hello():
    print("Привет!")


hello()


#
# Задание 2: Декоратор с аргументами
#
# Напиши декоратор, который будет принимать аргумент n и выводить его перед вызовом функции. Например, для функции, которая принимает аргумент x:

@my_decorator(5)
def multiply(x):
    return x * 2


# Декоратор должен выводить: “Аргумент: 5” перед вызовом функции multiply.
#
# Задание 3: Декоратор для замера времени
#
# Напиши декоратор, который замеряет время выполнения функции. Например, для функции, которая делает длительную операцию:

import time


@time_decorator
def long_running_function():
    time.sleep(2)


# После вызова long_running_function() должен выводиться вывод типа:
#
# Функция выполнялась 2.0 секунд.
#
# Задание 4: Декоратор для логирования вызовов функций
#
# Напиши декоратор, который будет логировать, какие функции вызываются, с какими аргументами. Например:

@log_decorator
def add(a, b):
    return a + b


# После вызова add(2, 3) вывод должен быть:
#
# Функция add вызвана с аргументами (2, 3)
#
# Задание 5: Декоратор, который изменяет аргументы
#
# Напиши декоратор, который изменяет все передаваемые в функцию строковые аргументы на заглавные буквы. Например:

@uppercase_decorator
def greet(name):
    print(f"Привет, {name}!")


# При вызове greet("Андрий") результат должен быть:
#
# Привет, АНДРИЙ!
#
# Задание 6: Применение нескольких декораторов
#
# Используй несколько декораторов для одной функции. Каждый декоратор должен изменять поведение функции, например:
# 	1.	Первый декоратор должен выводить “Начало выполнения”.
# 	2.	Второй декоратор должен выводить “Конец выполнения”.

@start_decorator
@end_decorator
def say_hello():
    print("Привет!")


# Когда вызываешь say_hello(), вывод должен быть:
#
# Начало выполнения
# Привет!
# Конец выполнения
#
# Задание 7: Декоратор с возвращаемым значением
#
# Напиши декоратор, который будет возвращать новое значение из функции, например, увеличивать результат на 10. Пример:

@increase_result_decorator
def add(a, b):
    return a + b

# При вызове add(3, 4) результат должен быть 17, потому что результат (7) увеличивается на 10.
#
# Постепенно решая эти задания, ты поймешь, как работают декораторы, как они могут изменять поведение функций и как взаимодействуют между собой.
#
# Когда закончишь, можешь прислать свои решения, и я дам обратную связь!
